{"version":3,"file":"static/js/387.bcd17a6c.chunk.js","mappings":"uRAEaA,EAAWC,EAAAA,GAAAA,GAAH,qGAORC,EAAWD,EAAAA,GAAAA,GAAH,8IAMRE,EAAaF,EAAAA,GAAAA,EAAH,uG,SCoCvB,EA7Ca,WACX,IAAQG,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAoBA,OAlBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,WAAMR,GAAN,8EACrBM,GAAa,GADQ,mBAGKG,EAAAA,EAAAA,IAAiBT,GAHtB,OAGbG,EAHa,OAInBC,EAAaD,EAAUO,MAJJ,gDAMnBC,QAAQC,IAAI,KAAMC,SANC,yBAQnBP,GAAa,GARM,4EAAH,sDAYJ,OAAZN,GAEJQ,EAAeR,EAChB,GAAE,CAACA,KAGF,gCACGK,IAAa,SAACS,EAAA,EAAD,KACd,SAAClB,EAAD,UACGO,EAAUY,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aAC1B,OACE,UAACpB,EAAD,YACE,SAACC,EAAD,UAAakB,IACZE,QAAQD,KACP,gBACEE,IAAG,0CAAqCF,GACxCG,IAAI,aALKL,EAUlB,QAIR,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 5px;\n  list-style-type: none;\n`;\n\nexport const CastItem = styled.li`\n  width: calc((100% - 15px) / 4);\n  display: flex;\n  align-items: center;\n  box-shadow: 0px 0px 13px 1px #a39b9c;\n`;\nexport const MovieTitle = styled.p`\n  height: 50px;\n  margin-bottom: 5px;\n  text-align: center;\n  width: 50px;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { requestMovieCast } from 'services/api';\nimport Loader from 'components/Loader/Loader';\nimport { CastItem, CastList, MovieTitle } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [movieCast, setMovieCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchMovieCast = async movieId => {\n      setIsLoading(true);\n      try {\n        const movieCast = await requestMovieCast(movieId);\n        setMovieCast(movieCast.cast);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    if (movieId === null) return;\n\n    fetchMovieCast(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      <CastList>\n        {movieCast.map(({ id, name, profile_path }) => {\n          return (\n            <CastItem key={id}>\n              <MovieTitle>{name}</MovieTitle>\n              {Boolean(profile_path) && (\n                <img\n                  src={`https://image.tmdb.org/t/p/w200/${profile_path}`}\n                  alt=\"{name}\"\n                />\n              )}\n            </CastItem>\n          );\n        })}\n      </CastList>\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["CastList","styled","CastItem","MovieTitle","movieId","useParams","useState","movieCast","setMovieCast","isLoading","setIsLoading","useEffect","fetchMovieCast","requestMovieCast","cast","console","log","message","Loader","map","id","name","profile_path","Boolean","src","alt"],"sourceRoot":""}